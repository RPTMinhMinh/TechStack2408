Overview Javascript

-	là công nghệ chủ yếu để xây dựng trang web
-	nhúng vào html để tăng cường trải nghiệm bằng cách thêm nhiều tương tác với ứng dụng
-	vai trò js quan trọng, toàn bộ ứng dụng có thể tạo ra bằng js
-	js có thể tạo ra các ứng dụng chạy bên phía server (chạy trên máy tính thay vì trình duyệt(back-end)) hay thậm chí IOS, androi

-> 	js là ngôn ngữ lập trình
	tạo ra hành vi, sự kiện cho trang web:
		bấm vào nút -> hiển thị một thông báo
		bộ đếm thời gian
		lấy dữ liệu từ nơi khác -> hiển thị lên trang web
	vừa áp dụng cho front-end và back-end
	không phải Java
	
có 3 cách viết:
-	external: viết code trong 1 file .js, dùng thẻ <script> để nhúng vào html
-	internal: viết code trong thẻ script
-	inline: 

biến ( variable ):
	là một trong ứng khái niệm cơ bản của bất kì ngôn ngữ lập trình nào
	là đại diện cho một vùng nhớ
	sử dụng để lưu trữ dữ liệu, truy xuất dữ liệu qua tên biến
	var / let / const

gán:
	gán là thao tác cơ bản để thay đổi biến nắm giữ
	đc thể hiện bằng dấu =
Lưu ý: const (constant: hằng số) bắt buộc phải có giá trị gán

đặt tên biến:
-	chữ cái đầu tiên bắt buộc là ký tự trong bảng chữ cái or dấu _ or dấu $
-	1a là tến biến k hợp lệ
-	có thể phân biệt chữ hoa và chữ thường (a và A là 2 biến khác nhau)
-	k sử dụng từ khóa của js là tên biến

đơn giản hóa:
	đặt theo kiểu camelCase
	vd: firstName, secondName, nguyenNhatMinh
	
Biến cục bộ và biến toàn cục:
-	phậm vi (scope) là khái niệm quan trọng xác định vùng mà biêns có thể đc truy cập 
-	biến cục bộ:
		khai báo bên trong 1 hàm or khối bằng từ khóa var, let, const,...
		{
			let a = 10;
			console.log(a); //thành công
			var b =1;
			{
				console.log(b);	//thành công
			}
		}
		console.log(a); 	//lỗi
		{
			let a = 10;
			console.log(a); 	//k liên quan đến biến bên trên
		}
-	biến toàn cục:
		let hehe =99;
		{
			console.log(hehe);
		}

để phân biết var, let, const:
-	var, let:
		có thể gán lại giá trị đc
		không cần giá trị khởi tạo
-	const:
		phải gán gtri khởi tạo
		không thể gán lại giá trị cho const
-	var: có hosting (đưa lên/kéo lên) và không có scope, còn let và const không có hosting nhưng có scope
	vd: console.log(number);
		let number = 10;
		console.log(number);
		//lỗi cả đoạn code
		
		console.log(number);
		var number = 10;
		console.log(number);
		//console dầu tiên: undefided
		//consolo thứ 2: 10
		
		//thứ tự làm việc
		var number;
		console.log(number);
		number = 10;
		console.log(number);
-> let và const cần định nghĩa trước rồi mới làm tiếp

kiểu dữ liệu:
Cơ bản:
	Number: số
		let x = 10;
	String: chuỗi ký tự
		let x = hehee
	Boolean: nhị phân (đại diện đúng or sai)
		let x = true;
	Null: kiểu dữ liệu rỗng
		let x = null;
	-> biểu thị biến có giá trị rỗng
	Undefided: khoong xác định
		let x = undefided; 	//2 trường hợp hay gặp
	-> khi khởi tạo 1 biến mà k gán giá trị


Toán tử:
	toán tử toán học:
		+
		-
		*
		/
		%
		++
		--
	toán tử gán:
		=
		+=
		-=
		*=
		/=
		%=
		**=
	
-> trong js, nếu 1 số + 1 chữ, js sẽ tự động ep kiểu chuỗi: nối chuỗi
			nếu 1 số - một chuỗi : chuyển chuỗi thành số
			nếu 1 số * một chuỗi : chuyển chuỗi thành số
			nếu 1 số / một chuỗi : chuyển chuỗi thành số
			
	toán tử so sánh:
		== :	chỉ so sánh giá trị
		===:	so sánh giá trị và kiểu dữ liệu
		!=: 	không bằng
		>=: 	lớn hơn or bằng
		
	toán tử logic:
	&&: và
	!!: hoặc
	!a: phủ định
	
	
	A	B	&&	!!
	1	1	1	1
	1	0	0	1
	0	1	0	1
	0	0	0	0